type UserSub = text;
type PublicKey = blob;
type UserKey = PublicKey;
type Timestamp = nat64;
type Signature = blob;

type PrepareDelegationResponse = record {
    user_key : UserKey;
    expiration : Timestamp;
};

type Delegation = record {
    pubkey : PublicKey;
    expiration : Timestamp;
    targets : opt vec principal;
};

type SignedDelegation = record {
    delegation : Delegation;
    signature : Signature;
};

type GetDelegationResponse = variant {
    signed_delegation : SignedDelegation;
    no_such_delegation;
};

type AuthenticatedResponse = record {
    user_sub : UserSub;
    user_principal : principal;
};

type Auth0JWK = record {
    kty : text;
    use : text;
    n : text;
    e : text;
    kid : text;
    x5t : text;
    x5c : vec text;
    alg : text;
};

type Auth0JWKS = record {
    keys : vec Auth0JWK;
};

service : {
    "prepare_delegation" : (text) -> (PrepareDelegationResponse);
    "get_delegation" : (text, Timestamp) -> (GetDelegationResponse) query;
    "authenticated" : () -> (AuthenticatedResponse) query;
    "sync_jwks" : () -> ();
    "set_jwks" : (Auth0JWKS) -> ();
};
